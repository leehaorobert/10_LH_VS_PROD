# LH_VS_价值策略

'''
================================================================================
导入Python库文件
================================================================================
'''
import pandas as pd
import numpy as np
from six import StringIO

'''
================================================================================
总体回测前
================================================================================
'''
#总体回测前要做的事情,g变量设定后无法在交易中通过更新代码的方式进行修改
def initialize(context):
    set_variables()                          # 设置中间变量
    set_backtest()                           # 设置回测条件
    set_benchmark('000300.XSHG')             # 设置回测基准
    #set_benchmark('399006.XSHE')


#设置中间变量，仅定义需要在回测间保存的变量
def set_variables():
    g.df_peg_rank_yest = pd.DataFrame()      #

#设置回测条件
def set_backtest():
    set_option('use_real_price',True)        # 用真实价格交易
    log.set_level('order','error')           # 设置报错等级

'''
================================================================================
每天开盘前
================================================================================
'''
#每天开盘前要做的事情
def before_trading_start(context):

    # 设定回测参数
    g.intra_industry_count = 2               # 定义组合中同一个行业的股票个数


    # 设置手续费
    set_slip_fee(context)

    # 设置股票池,股票池会随着新股上市而变化
    g.stocks = get_index_stocks('000300.XSHG') # 设置沪深300为初始股票池
    g.stocks_1 = get_index_stocks('399006.XSHE')
    g.stocks.extend(g.stocks_1)

    # 设置可行股票池，去除当日停牌的股票
    g.feasible_stocks = set_feasible_stocks(g.stocks,context)


# 根据不同的时间段设置滑点与手续费
def set_slip_fee(context):
    # 将滑点设置为0
    set_slippage(FixedSlippage(0))
    # 根据不同的时间段设置手续费
    dt=context.current_dt
    if dt>datetime.datetime(2013,1, 1):
        set_commission(PerTrade(buy_cost=0.0003, sell_cost=0.0013, min_cost=5))
    elif dt>datetime.datetime(2011,1, 1):
        set_commission(PerTrade(buy_cost=0.001, sell_cost=0.002, min_cost=5))
    elif dt>datetime.datetime(2009,1, 1):
        set_commission(PerTrade(buy_cost=0.002, sell_cost=0.003, min_cost=5))
    else:
        set_commission(PerTrade(buy_cost=0.003, sell_cost=0.004, min_cost=5))


# 设置可行股票池：过滤掉当日停牌的股票
def set_feasible_stocks(initial_stocks,context):
    # 判断初始股票池的股票是否停牌，返回list
    paused_info = []
    current_data = get_current_data()
    for i in initial_stocks:
        paused_info.append(current_data[i].paused)
    df_paused_info = pd.DataFrame({'paused_info':paused_info},index = initial_stocks)
    unsuspened_stocks =list(df_paused_info.index[df_paused_info.paused_info == False])
    return unsuspened_stocks

'''
================================================================================
每天交易时
================================================================================
'''
# 每个单位时间(如果按天回测,则每天调用一次,如果按分钟,则每分钟调用一次)调用一次
def handle_data(context, data):

    # 取得备选股票列表
    df_sort_PEG = prepare_stock_list(context)

    # 股票买入判断
    list_to_buy, list_to_sell_tmp = stocks_to_buy(context, df_sort_PEG)

    # 当前仓位卖出判断
    list_to_sell = stocks_to_sell(context, list_to_sell_tmp)

    # 股票卖出及买入操作
    # 卖出操作
    sell_operation(list_to_sell)
    # LH: 买入操作
    message_buy = buy_operation(context, list_to_buy)

    # 发送消息：
    message_all = ['Sell Security']
    message_all.extend(list_to_sell)
    message_all.append('Buy Security')
    message_all.extend(message_buy)
    send_message(message_all)
    log.info(message_all)


################################################################################
################################################################################
# 取得备选股票列表
def prepare_stock_list(context):

    # 限制条件1：PEG值
    # 得到一个dataframe：index为股票代码，data为相应的PEG值
    df_PEG = get_PEG(context, g.feasible_stocks)

    # 将股票按PEG升序排列，返回daraframe类型
    df_sort_PEG = df_PEG.sort(columns=['peg'], ascending=[1])

    # 筛选出符合条件的股票
    df_sort_PEG = df_sort_PEG[(df_sort_PEG.inc_rev_yoy>0)&(df_sort_PEG.inc_rev_yoy<150)&\
                              (df_sort_PEG.inc_npft_yoy>0)&(df_sort_PEG.inc_npft_yoy<150)&\
                              (df_sort_PEG.pe>0)&\
                              (df_sort_PEG.mkt_cap<1000)]


    # 限制条件2：行业分散
    # LH: 增加了行业限制
    df_sort_PEG = industry_limit(df_sort_PEG)

    return df_sort_PEG


# 计算股票的PEG值
def get_PEG(context, stock_list):
    # 查询股票池里股票的市盈率，收益增长率
    q_PE_G = query(valuation.code, \
                   valuation.pe_ratio, \
                   indicator.inc_revenue_year_on_year, \
                   indicator.inc_net_profit_year_on_year,\
                   valuation.market_cap, \
                     ).filter(valuation.code.in_(stock_list))
    # 得到一个dataframe：包含股票代码、市盈率PE、收益增长率G
    # 默认date = context.current_dt的前一天,使用默认值，避免未来函数，不建议修改
    #df_data = get_fundamentals(q_PE_G, date=current_date)
    df_data = get_fundamentals(q_PE_G)
    df_data = df_data.dropna()

    # 重新给columns命名
    df_data.columns = ['code','pe','inc_rev_yoy','inc_npft_yoy','mkt_cap']

    # 得到一个Series：存放股票的市盈率TTM，即PE值
    stock_PE = df_data['pe'].values
    # 得到一个Series：存放股票的收益增长率，即G值
    stock_G = df_data['inc_npft_yoy'].values
    # 得到一个Series：存放股票的PEG值
    stock_PEG = stock_PE/stock_G

    df_data.insert(5,'peg',stock_PEG)

    df_data.index = df_data['code'].values
    df_data = df_data.drop('code',axis=1)



    return df_data


# 限定每个细分行业只能有3支股票
def industry_limit(df_sort_PEG):
    # 定义每个行业股票允许出现的次数
    count_limit = g.intra_industry_count
    industry_list = []

    # 读取数据文件
    body = read_file('data/stock_industry_info.csv')
    # 读取数据的第一列为index
    pd_data = pd.read_csv(StringIO(body), index_col=0)

    # 复制index
    peg_index = df_sort_PEG.index
    # 开始循环处理
    for stock_code in peg_index:
        # 防止行业信息不全
        if stock_code in pd_data.index:
            # 获得该股票的行业代码
            industry_code = pd_data['industry_code'][stock_code]
            # 进行判断
            if industry_list.count(industry_code) <= count_limit:
                # 将该行业code加入到列表
                industry_list.append(industry_code)
            if industry_list.count(industry_code) > count_limit:
                # 删除该行
                df_sort_PEG = df_sort_PEG.drop(stock_code)

    df_sort_PEG.insert(5,'rank',np.arange(0,df_sort_PEG.shape[0]))

    return df_sort_PEG

################################################################################
################################################################################
# 多仓（买入）信号汇总信号判断
def stocks_to_buy(context, df_sort_PEG):
    # 变量初始化
    list_to_buy = []
    list_to_sell_tmp = []

    # 将存储有序股票代码index转换成list并取前g.num_stocks个为待买入的股票，返回list
    # 将跌入排名前十的股票，加入到购买清单
    for i in range(0, 10):
        # 禁止一次性买入
        if g.df_peg_rank_yest.shape[0]>0:
            # 如果该股票代码，也存在于上一个交易日的清单中
            if df_sort_PEG.index[i] in g.df_peg_rank_yest.index:
                # 如果上一个交易日该股票的排名在10名以外
                if g.df_peg_rank_yest['rank'][df_sort_PEG.index[i]]>9:
                    list_to_buy.append(df_sort_PEG.index[i])
            else:
                list_to_buy.append(df_sort_PEG.index[i])


    for i in range(0, 15):
        # 初始化
        if g.df_peg_rank_yest.shape[0]>0:
            # 上一个交易日的股票代码，在当日的清单中
            if g.df_peg_rank_yest.index[i] in df_sort_PEG.index:
                # 如果当日的股票排名在15名以外
                if df_sort_PEG['rank'][g.df_peg_rank_yest.index[i]]>14:
                    list_to_sell_tmp.append(g.df_peg_rank_yest.index[i])
                #elif df_sort_PEG['rank'][g.df_peg_rank_yest.index[i]]<9:
                #    list_to_sell_tmp.append(g.df_peg_rank_yest.index[i])
            else:
                list_to_sell_tmp.append(g.df_peg_rank_yest.index[i])

    g.df_peg_rank_yest = df_sort_PEG[:30]

    return list_to_buy, list_to_sell_tmp

################################################################################
################################################################################
# 空仓（卖出）信号判断
def stocks_to_sell(context, list_to_sell_tmp):
    list_to_sell=[]
    current_data = get_current_data()
    # 对于不需要持仓的股票，全仓卖出
    for stock_sell in list_to_sell_tmp:
        # 条件1：该股票是否停牌
        paused_status = current_data[stock_sell].paused
        if paused_status == False:
            # 条件2：该股票是否涨停
            today_open = current_data[stock_sell].day_open
            yest_close = history(count=1, unit='1d', field='close', security_list=stock_sell).values
            full_growth_status = (today_open/yest_close > 1.09)
            if full_growth_status == False:
                #
                list_to_sell.append(stock_sell)

    return list_to_sell

################################################################################
################################################################################
# 卖出及买入操作
def sell_operation(list_to_sell):
    for stock_sell in list_to_sell:
        order_target_value(stock_sell, 0)

# 执行买入操作
def buy_operation(context, list_to_buy):
    #for stock_sell in list_to_buy:

    # 为每个持仓股票分配资金
    #g.capital_unit=context.portfolio.portfolio_value/len(list_to_buy)
    g.capital_unit=context.portfolio.portfolio_value/15

    # LH：当前的持股信息
    current_security = context.portfolio.positions.keys()
    # 消息列表
    message_buy = []

    # 买入在“待买股票列表”的股票
    for stock_buy in list_to_buy:
        if stock_buy not in current_security:
            order_target_value(stock_buy, g.capital_unit)
            message_buy.append(stock_buy)

    return message_buy

'''
================================================================================
每天收盘后
================================================================================
'''
# 每天收盘后做的事情
# 进行长运算（本策略中不需要）
def after_trading_end(context):
    return
